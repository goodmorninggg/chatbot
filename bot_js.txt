document.addEventListener('DOMContentLoaded', function () {
    // Create a div element
const chatbotContainer = document.createElement('div');
chatbotContainer.id = 'chatbot-container'; // Set the ID

// Append the container to the body or any other element
document.body.appendChild(chatbotContainer);
    const scriptTag = document.querySelector('script[src*="bot.js"]'); // Select the script tag
    
    // Get the attribute values
    const botName = scriptTag.getAttribute('chatbotName');
    const userName = scriptTag.getAttribute('user');

    console.log('Bot Name:', botName);
    console.log('User Name:', userName);
    
    const botHtmlContent = `

    <style>
    #notification-banner {
        position: absolute;
        bottom: 80px;
        right: 20px;
        background-color: #f1f1f3;
        color: #fff;
        padding: 10px;
        border-radius: 5px;
        display: none;
        box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.1);
    }
    /* Chatbot toggler */
    #toggle-chatbot {
        background-color: #2825c6;
        color: #fff;
        height: 70px;
        width: 70px;
        border-radius: 50%;
        position: absolute;
        bottom: 20px;
        right: 20px;
        font-size: 20px;
        border: none;
        cursor: pointer;
        outline: none;
        box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
    }
    #toggle-chatbot::before {
        content: 'संवाद';
        font-size: 24px;
    }
    #toggle-chatbot:hover {
        background-color: #326aec;
    }
    /* Chatbot container */
    .container-chat{
        border: 1px solid #ccc;
        border-radius: 5px;
        overflow-y: hidden;
        overflow-x: hidden;
        position: fixed;
        bottom: 50px;
        right: 50px;
        padding: 13px;
        margin: 10px;
        width: auto;
        max-width: 90%;
        height: auto;
        max-height: 90%; 
        display: none;
        background-color: #fff;
        box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.1); 
    }
    /* Edge specific adjustments */
    @supports (-ms-ime-align:auto) {
        .container-chat {
        height: 75%; 
        max-height: 84%; 
        }
     .chat{
       height: 70%;
       max-height: 75%;
        }
        @media screen and (max-width: 768px) {
        .container-chat {
            width: 95vw; 
            height: 65%;
        }
    }}
    /* mozila */
    @-moz-document url-prefix() {
        .container-chat {
        height: 85%; 
        max-height: 90%; 
        }
     .chat{
       height: 75%;
       max-height: 80%;
        }
        @media screen and (max-width: 768px) {
        .container-chat {
            width: 95vw; 
            height: 67%;
        }
    }}
    
    /* Chrome specific adjustments */
    @media screen and (-webkit-min-device-pixel-ratio:0) {
        .container-chat {
        height: 77%; 
        max-height: 85%; 
        }
     .chat{
       height: 76%;
        }
        @media screen and (max-height: 615px) {
        .container-chat {
            /* width: 95vw;  */
            height: 79%;
        }
    }}
    
    @media screen and (max-height: 600px) {
          .container-chat {
         overflow-y: auto;
    }}
    
    button {
        margin: 0;
        padding: 0;
    }
    section.bot{
        height: 90%;
    }
    label{
        margin-top: 0%;
    }
    .chat{
        overflow-y: auto;
        border: 1px solid #ccc;
        padding: 1rem;
        overflow-y: scroll;
        padding-bottom: 10px;
        border-radius: 5px;
        margin-bottom: 5px;
        max-height: 400px;
        height: 71%;
        width: 320px;
        background-color: white;
        /* border-color: white; */
    }
    .chat::-webkit-scrollbar{
         display: none;
    }
    .cat-gory{
        /* overflow-y: auto; */
        border: 1px solid white;
        padding: 5px;
        /* border-radius: 5px; */
        /* margin-top: 10px;  */
        height: 80%;
        max-height: 50px;
        width: 80%;
        overflow-x: hidden;
        white-space: nowrap;
        overflow-y: hidden;
        background-color: white;
        float: left;
    }
    .cat-gory button{
        background-color: wheat;
        border-width: 1px;
        border-color: wheat;
        color:black;
        /* float: left; */
        height: 70%;
        width: auto;
        border-radius: 5px;
        margin-top: 0px;
        margin-right: 5px;
        padding: 2px;
    }
    .category-content{
        width: 350px;
        height: 10%;
        overflow: hidden;
        white-space: nowrap;
        margin: 0px;
    }
    .category-content .scroll-right-button{
        float: left;
        /* border-radius: 5px; */
        border: white;
        height: 75%;
        margin-bottom: 5px;
        /* margin-bottom: 5px; */
        width: 14px;
        background-color: white;
        border-color: white;
        border-top-right-radius: 5px;
        border-bottom-right-radius: 5px;
        font-size: large;
    }
    .category-content .scroll-left-button{
        float: left;
        /* border-radius: 5px; */
        border: white;
        height: 75%;
        /* margin-top: 10px; */
        /* margin-bottom: 5px; */
        width: 14px;
        background-color: white;
        border-color: white;
        border-top-right-radius: 5px;
        border-bottom-right-radius: 5px;
        font-size: large;
    }
    .bot-name{
        background-color: #2825c6;
        padding: 5px;
        /* height: 5%; */
        margin: 5px;
        text-align: center;
        color: white;
    }  
    .feedback-div{
       background-color:#3dc553;
        border-color: black;
        border-width: 1px;
        color: white;
        margin-top: 3px;
        margin-right: 30%;
        float: left;
        clear: both;
        padding: 5px 10px; 
        border-radius: 10px;
        margin: 10px 0; 
    }    
    .feedback-div>button{
           background-color: #2196F3;
           color: black;
           clear: both;
           border-radius: 5px;
           height: 30px;
           width: 30px;
           margin-left: 20px;
    }    
    /*styles for the star rating section  */
    .star-container {
        display: flex;
        align-items: center;
        margin-top: 10px;
        background-color: #2196F3;
        color: black;
        margin-top: 3px;
        /* margin-left: 30%; */
        float:right;
        clear: both;
        border-radius: 10px;
    }
    .star {
        font-size: 24px;
        cursor: pointer;
    }
    .star.selected {
        color: rgb(250, 215, 16); 
    }
    .thankmessage{
        /* display: flex; */
        /* align-items: center; */
        /* margin-top: 10px; */
        background-color: #2196F3;
        color: white;
        margin-top: 3px;
        /* margin-left: 30%; */
        float: right;
        clear: both;
        /* height: 20px; */
        border-radius: 10px;
        flex: 1;
        padding: 0.5rem;
        border: 1px solid #ccc;
    }
    .submit_feedback{
       background-color: #3dc553;
       color: black;
       clear: both;
       border-radius: 5px;
       height: auto;
       width: 60px;
    }
    #emoji-options {
        display: flex;
        justify-content: center;
        margin-bottom: 7px; 
        /* height: 3%; */
        max-height: 30px;
    
    }
    .emoji-options span {
         font-size: 24px;
         cursor: pointer;
         margin: 0 10px;
    }
    .initial-greeting {
        background-color:#3dc553;
        border-color: black;
        border-width: 1px;
        color: white;
        margin-top: 3px;
        margin-right: 30%;
        float: left;
        clear: both;
        padding: 5px 10px; 
        border-radius: 10px;
        margin: 10px 0; 
    }
    /*  CSS for the bot response message */
    .response-message {
        background-color: #3dc553;
        border-color: black;
        border-width: 1px;
        color: white;
        margin-top: 3px;
        float: left;
        clear: both;
        padding: 5px 10px; 
        border-radius: 10px;
        margin: 10px 0; 
    }
    .user-input {
        display: flex;
        align-items: center;
        width: 100%;
    }
    #user-message {
        flex: 1;
        padding: 0.5rem;
        border: 1px solid #ccc;
        border-radius: 5px;
    }
    .chat-message.user-message {
        background-color: #2196F3;
        color: white;
        margin-top: 3px;
        margin-left: 30%;
        float: right;
        clear: both;
    }
    .chat-message.response-message{
        background-color: #3dc553;
        border-color: black;
        border-width: 1px;
        color:white;
        margin-top: 3px;
        margin-right: 30%;
        float: left;
        clear: both;
    }
    .chat-message {
        background-color: #a3c3e4; 
        padding: 5px 10px; 
        border-radius: 10px;
        margin: 10px 0; 
    }
    /* Style for the dropdown content */
    .dropdown-content {
        display: none;
        background-color: #f9f9f9;
        min-width: 200px;
        box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
        z-index: 1;
        max-height: 200px;
        overflow-y: auto;
        position: absolute; /* Set position to absolute */
        bottom: calc(10%);
    }
    /* Style for individual dropdown items */
    .dropdown-content a {
        color: black;
        padding: 12px 16px;
        text-decoration: none;
        display: block;   
    }
    /* Style for the active (highlighted) dropdown item */
    .dropdown-content a:hover {
        background-color: #f1f1f1;
    }
    </style>

    <div id="notification-banner"></div>

    <button id="toggle-chatbot"></button>

    <div class="container-chat" id="draggable-chatbot">
    <div class="bot-name"><b></b></div>

                <div class='category-content'>
                    <button id="scroll-left-button" class="scroll-left-button">&#9664;</button>
                    <div class="cat-gory" id="cat-gory">
                </div>
                <button id="scroll-right-button" class="scroll-right-button">&#9654;</button>
            </div>
                <div class="chat" id="chat" user="{{userName}}" data-chatbot="{{ botName }}">
                    
                </div>
                <div class="emoji-options" id="emoji-options">
                </div>
          
                <div class="user-input">
                <input type="text" id="user-message" placeholder="Enter a question...">
                <div class="dropdown-content" id="dropdown-content">
                </div>
            </div>
    </div>
    `;
    chatbotContainer.innerHTML = botHtmlContent;
    const botNameElement = document.querySelector('.bot-name b');
    botNameElement.innerHTML = botName;
    // Chatbox DOM elements
        const chatbot = document.getElementById('draggable-chatbot');
        const toggleButton = document.getElementById('toggle-chatbot');
        const notificationBanner = document.getElementById('notification-banner');

        toggleButton.addEventListener('click', () => {
        // Toggle chatbot visibility
            if (chatbot.style.display === 'none' || chatbot.style.display === '') {
                chatbot.style.display = 'block';
            } else {
                chatbot.style.display = 'none';
            }
            // Handle initial toggle actions
            if (isFirstToggle) {
                handleFirstToggle();
                isFirstToggle = false; // Set the flag to false after the first toggle
            }
        });
        // Show notification banner on page load
        notificationBanner.style.display = 'block';
        // Hide notification banner after 5 seconds
        setTimeout(() => {
            notificationBanner.style.display = 'none';
        },3000);

    const scrollLeftButton = document.getElementById('scroll-left-button');
    const scrollRightButton = document.getElementById('scroll-right-button');

    scrollLeftButton.addEventListener('click', () => {
        catGory.scrollBy({
            top: 0,
            left: -100, // Adjust the scroll amount as needed
            behavior: 'smooth'
        });
    });
    // Function to scroll the category content to the right
    scrollRightButton.addEventListener('click', () => {
        catGory.scrollBy({
            top: 0,
            left: 100, // Adjust the scroll amount as needed
            behavior: 'smooth'
        });
    });
            let isFirstToggle = true; // Flag to check if it's the first toggle
        
            // Function to append messages
            function appendMessage(sender, message, isUserOption = false, messageClass = '') {
                const chat = document.getElementById('chat');
                const messageContainer = document.createElement('div');
                // Add classes based on conditions
                if (isUserOption) {
                    messageContainer.classList.add('user-option');
                } else {
                    messageContainer.classList.add('message');
                }
                // Add additional class if provided
                if (messageClass !== '') {
                    messageContainer.classList.add(messageClass);
                }
                // Set innerHTML content
                messageContainer.innerHTML = `<span class="sender">${sender}</span> ${message}`;
                
                // Append the message container to the chat
                chat.appendChild(messageContainer);
        
                // Auto-scroll to the bottom
                chat.scrollTop = chat.scrollHeight;
            }
            // Function to handle initial greeting and emoji selection
            function handleFirstToggle() {
                if (isFirstToggle) {
                    // Display initial greeting and emoji options
                    appendMessage('', 'Hi! How are you feeling today?', false, 'initial-greeting');
                    appendEmojiOptions();
                    isFirstToggle = false;
                }
            }
        
            // Trigger handleFirstToggle on page load
            window.onload = function () {
                handleFirstToggle();
            };
        
            // Function to handle emoji selection
            function handleEmojiSelection(emoji) {
                // Handle user's emoji selection
                if(emoji=='⏩'){
                    appendMessage('','', false);
                }
                else{
                    appendMessage('', emoji, false);
                }
                // Provide appropriate bot response based on the selected emoji
                let botResponse;
                switch (emoji) {
                    case '☹️':
                        botResponse = 'I understand. Please let me know how I can help you.';
                        break;
                    case '🙂':
                        botResponse = 'I understand. Is there something that you would like me to help you with?';
                        break;
                    case '😄':
                        botResponse = 'That\'s great to hear!  What can I do for you today?';
                        break;
                    default:
                        botResponse = 'How may I assist you today?';
                }
                // Display bot's response
                setTimeout(() => {
                    appendMessage('', botResponse, false, 'response-message');
                }, 1000);
        
                // Hide emoji options after user makes a selection
                hideEmojiOptions();
            }
 // Function to hide emoji options
            function hideEmojiOptions() {
                const emojiOptions = document.querySelector('.emoji-options');
                emojiOptions.style.display = 'none';
            }
        
            // Function to disable emoji options
            function disableEmojiOptions() {
                const emojiOptions = document.querySelectorAll('.emoji-options span');
                emojiOptions.forEach((emojiOption) => {
                    emojiOption.style.pointerEvents = 'none';
                });
            }
            // Function to append emojis as clickable options
            function appendEmojiOptions() {
                const emojis = ['☹️', '🙂', '😄','⏩'];
                const emojiOptionsContainer = document.getElementById('emoji-options');
        
                // Check if emojis are already appended
                if (emojiOptionsContainer.children.length === 0) {
                    emojis.forEach((emoji) => {
                        const emojiSpan = document.createElement('span');
                        emojiSpan.textContent = emoji; // Use textContent instead of innerHTML for plain text
                        emojiSpan.addEventListener('click', () => handleEmojiSelection(emoji));
                        emojiOptionsContainer.appendChild(emojiSpan);
                    });
                }
            }           
function scrollChatHistoryToBottom() {
    const chat = document.getElementById('chat');
    chat.scrollTop = chat.scrollHeight;
}
    const catGory = document.getElementById('cat-gory');
    const chat = document.getElementById('chat');
    const dropdownContent = document.getElementById('dropdown-content');
    const inputField = document.getElementById('user-message');
    let trainingData = []; 
    let categories=[];
    let questionCount = 0;
    
    if(catGory){       
        fetch(`http://172.22.4.83:8080/get_categories/${botName}/${userName}`)

                .then(response => response.json())
                .then(data => {
                    categories= data;

                    const categoryElement = document.createElement('button');
                            categoryElement.textContent = 'ALL';
                            catGory.appendChild(categoryElement); 
                            iscreated=true;
                            categoryElement.addEventListener('click', function () {
                                chat.innerHTML = '';
                                // displayMessage("Welcome! How can I assist you today?", false);

                            // Clear input field and dropdown content
                            inputField.value = '';
                            dropdownContent.innerHTML = '';
    
                            // Display questions related to the selected category in the dropdown

                            displayQuestions('ALL');
                            });
                    // Populate the dropdown with fetched categories                        
                    categories.forEach(categories => {
                        const categoryElement = document.createElement('button');
                        categoryElement.textContent = categories;
                        
                        catGory.appendChild(categoryElement);

                        // Event listener for category selection
                        categoryElement.addEventListener('click', function () {
                            // Clear chat section
                            chat.innerHTML = '';
                            // displayMessage("Welcome! How can I assist you today?", false);

                            // Clear input field and dropdown content
                            inputField.value = '';
                            dropdownContent.innerHTML = '';
    
                            // Display questions related to the selected category in the dropdown
                            displayQuestions(categories, true);
                        });
                });
                })
                .catch(error => {
                    console.error('Error fetching categories:', error);
                });
    }
    function displayMessage(message, isUserMessage) {
        const messageDiv = document.createElement('div');
        messageDiv.textContent = message;
        messageDiv.classList.add('chat-message');

        if (isUserMessage) {
            messageDiv.classList.add('user-message');
        } else {
            messageDiv.classList.add('response-message');
        }
        chat.appendChild(messageDiv);
    }
    if (chat){
        // displayMessage("Welcome! How can I assist you today?", false);
        const username = chat.getAttribute('user');
    
        displayQuestions("ALL",false)
        
        function displayFeedback() {
            const feedbackDiv = document.createElement('div');
            feedbackDiv.classList.add('feedback-div');
    
            const feedbackMessage = document.createElement('p');
            feedbackMessage.textContent = "Is there anything else I can help you with?";
            feedbackDiv.appendChild(feedbackMessage);
    
            const yesButton = document.createElement('button');
            yesButton.textContent = 'Yes';
            yesButton.addEventListener('click', function() {
                chat.removeChild(feedbackDiv); // Remove the feedback div
                chat.addEventListener('DOMNodeInserted', incrementQuestionCount); // Re-add event listener
                displayMessage("Continue",true);
            });
            feedbackDiv.appendChild(yesButton);
    
            const noButton = document.createElement('button');
            noButton.textContent = 'No';
            noButton.addEventListener('click', function() {
                chat.removeChild(feedbackDiv); // Remove the feedback div
    
                displayMessage("Please give feedback!",true);
                const starContainer = document.createElement('div');
                starContainer.classList.add('star-container');
                let selectedStars = 0;
    
                // Function to handle star selection
                function handleStarSelection(starValue) {
                    selectedStars = starValue;
                    const stars = document.querySelectorAll('.star');
                    stars.forEach((star, index) => {
                        if (index < starValue) {
                            star.classList.add('selected');
                        } else {
                            star.classList.remove('selected');
                        }
                    });
                }
    
                let starsSubmitted = false;
                function handleStarSelection(starValue) {
                    if (!starsSubmitted) {
                        selectedStars = starValue;
                        const stars = document.querySelectorAll('.star');
                        stars.forEach((star, index) => {
                            if (index < starValue) {
                                star.classList.add('selected');
                            } else {
                                star.classList.remove('selected');
                            }
                        });
                    }
                }
                // Create 5 stars for the rating system
                for (let i = 1; i <= 5; i++) {
                    const star = document.createElement('span');
                    star.textContent = '★';
                    star.classList.add('star');
                    star.dataset.value = i;
                    star.addEventListener('click', () => handleStarSelection(i));
                    starContainer.appendChild(star);  
                }
                const submitButton = document.createElement('button');
                submitButton.classList.add('submit_feedback')
                submitButton.textContent = 'Submit';
                submitButton.addEventListener('click', function() {
                     if (selectedStars > 0) {
                        const thankYouMessage = document.createElement('p');
                        thankYouMessage.classList.add('thankmessage')
                        thankYouMessage.textContent = "Thank you for your feedback!";
                        starContainer.removeChild(submitButton)
                        chat.appendChild(thankYouMessage);
                        chat.scrollTop = chat.scrollHeight;
                        starsSubmitted = true;
    
                        const stars = document.querySelectorAll('.star');
                        stars.forEach(star => {
                            star.removeEventListener('click', handleStarSelection); });
                     } 
                });
                starContainer.appendChild(submitButton);
                chat.appendChild(starContainer);
            });
            feedbackDiv.appendChild(noButton);
            chat.appendChild(feedbackDiv);
            // After displaying feedback, remove the event listener to prevent multiple displays
            chat.removeEventListener('DOMNodeInserted', incrementQuestionCount);
        }
        function checkQuestionCount() {
            // Check the question count and display feedback after a certain threshold
            if (questionCount === 9) {
                displayFeedback();
            }
        }
        function incrementQuestionCount() {
            questionCount++;
            checkQuestionCount();
        }
                // Function to display predefined questions in the question section
                function displayQuestions(category,iscategory) {
    
                    if(iscategory==true){
                        fetch(`http://172.22.4.83:8080/fetch_data_with_category/${botName}/${userName}/${category}`)
                    .then(response => response.json())
                    .then(data => {
                        console.log('Fetched previous data:', data);
                        trainingData = data;
                    });
                    }
                    
                    else{
                        fetch(`http://172.22.4.83:8080/fetch_previous_data/${botName}/${userName}`)
                    .then(response => response.json())
                    .then(data => {
                        // Store the training data
                        console.log('Fetched previous data:', data);
                        trainingData = data;
                    });
                    }
    
                    // Get the input field and dropdown content
                    const inputField = document.getElementById('user-message');
                    const dropdown = document.getElementById('dropdown-content');
    
                    trainingData.filter(entry => entry.category === category).forEach(entry => {
                        const optionElement = document.createElement('a');
                        optionElement.textContent = entry.question;
                        optionElement.addEventListener('click', function () {
                            // When a question is clicked, set it as the input value (user's message)
                            const question = entry.question;
                            displayMessage(question, true);
    
                            // Find and display the response for the selected question
                            const response = entry.response;
                            if (response) {
                                // Display the response in the chat section
                                displayMessage(response, false);
    
                                // Scroll to the bottom of the chat history
                                chat.scrollTop = chat.scrollHeight;
                            }
                        });
                        dropdownContent.appendChild(optionElement);
                    });
            // Event listener for input field keyup (to detect user input)
                inputField.addEventListener('keyup', function() {
                    const inputValue = inputField.value.toLowerCase(); // Get the user input value
            // Clear previous dropdown content
                    dropdown.innerHTML = '';
            // Filter options based on user input and display them in the dropdown
                    trainingData.forEach(entry => {
                        const que=entry.question;
                        const option = entry.question.toLowerCase();
    
                        if (option.includes(inputValue)) {
                            const optionElement = document.createElement('a');
                            optionElement.textContent = entry.question;
                            optionElement.addEventListener('click', function() {
                                // When an option is clicked, set it as the input value
                                // When a predefined question button is clicked, set it as the user's message (on the right side)
    
                                displayMessage(que, true);
    
                                // Find the response for the selected question in the training data
                                const response = entry.response;
                                if (response) {
                                    // Display the response on the left side
                                    displayMessage(response, false);
    
                                    scrollChatHistoryToBottom();
                                }
                                inputField.value = "";
                                dropdown.style.display = 'none';
                            });
                            dropdown.appendChild(optionElement);
                        }
                });
    // Show/hide dropdown based on input
    if (inputValue.length > 0) {
        dropdown.style.display = 'block';
    } else {
        dropdown.style.display = 'none';
    }
    }); }
         //Start by displaying the predefined questions at the bottom
         displayQuestions('ALL',false);
    
         chat.addEventListener('DOMNodeInserted', incrementQuestionCount);
    
    }  
});
